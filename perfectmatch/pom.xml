<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>backend</artifactId>
	<packaging>jar</packaging>
	<name>perfectmatch-backend</name>
	<description>Core Project for Managing matching samples of audio</description>

	<parent>
		<groupId>com.perfectmatch</groupId>
		<artifactId>perfectmatch</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<!--<relativePath/> < lookup parent from repository -->
	</parent>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>11</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<ehcache.spring.version>1.1.2</ehcache.spring.version>
		<swagger2.version>2.4.0</swagger2.version>
		<serenity.version>2.0.40</serenity.version>
        <serenity.cucumber.version>1.9.31</serenity.cucumber.version>
        <serenity.maven.version>2.0.40</serenity.maven.version>
        <jackson-version>2.8.9</jackson-version>
        <jackson-threetenbp-version>2.6.4</jackson-threetenbp-version>
       
        <tags></tags>
        <docker.image.repo>machadojo</docker.image.repo>
        <docker.image.name>perfectmatch-webapp</docker.image.name>
	</properties>

	<dependencies>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <dependency>
		    <groupId>de.flapdoodle.embed</groupId>
		    <artifactId>de.flapdoodle.embed.mongo</artifactId>
		    <scope>test</scope>
		</dependency>
		
		 <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-mongodb</artifactId>
        </dependency>
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-apt</artifactId>
        </dependency>
        
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<!-- Exclude the Tomcat dependency -->
<!-- 				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion> -->
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-test</artifactId>
       </dependency>
        <dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-commons</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
   			<scope>provided</scope>
        </dependency>
        
        <!-- test scoped -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
		<dependency>
		    <groupId>org.junit.jupiter</groupId>
		    <artifactId>junit-jupiter-engine</artifactId>
		    <scope>test</scope>
		</dependency>
        <dependency>
		    <groupId>org.junit.vintage</groupId>
		    <artifactId>junit-vintage-engine</artifactId>
		    <scope>test</scope>
		</dependency>
        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>2.9.0</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
		    <groupId>org.javassist</groupId>
		    <artifactId>javassist</artifactId>
		    <version>3.23.1-GA</version>
		</dependency> 
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-core</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.codehaus.groovy</groupId>
		    <artifactId>groovy-all</artifactId>
		    <version>2.5.6</version>
		    <type>pom</type>
		</dependency>
       
		<!-- Serenity BDD -->
        <dependency>
            <groupId>net.serenity-bdd</groupId>
            <artifactId>serenity-core</artifactId>
            <version>${serenity.version}</version>
        </dependency>
        <dependency>
            <groupId>net.serenity-bdd</groupId>
            <artifactId>serenity-junit</artifactId>
            <version>${serenity.version}</version>
        </dependency>
        <dependency>
            <groupId>net.serenity-bdd</groupId>
            <artifactId>serenity-cucumber</artifactId>
            <version>${serenity.cucumber.version}</version>
        </dependency>
        <dependency>
            <groupId>net.serenity-bdd</groupId>
            <artifactId>serenity-rest-assured</artifactId>
            <version>${serenity.version}</version>
        </dependency>
        <dependency>
			<groupId>net.serenity-bdd</groupId>
			<artifactId>serenity-spring</artifactId>
			<version>${serenity.version}</version>
			<scope>test</scope>
		</dependency>
<!-- 		https://www.baeldung.com/serenity-bdd -->
<!-- 		<dependency> -->
<!-- 		    <groupId>net.serenity-bdd</groupId> -->
<!-- 		    <artifactId>serenity-junit</artifactId> -->
<!-- 		    <version>2.0.40</version> -->
<!-- 		</dependency> -->

		<dependency>
		    <groupId>javax.validation</groupId>
		    <artifactId>validation-api</artifactId>
		</dependency>

  <!-- JSON processing: jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
        </dependency>
            <dependency>
                <groupId>com.github.joschi.jackson</groupId>
                <artifactId>jackson-datatype-threetenbp</artifactId>
                <version>${jackson-threetenbp-version}</version>
            </dependency>

		 <!-- JAXB @ Serenity -->
<!--         <dependency> -->
<!--             <groupId>com.sun.xml.bind</groupId> -->
<!--             <artifactId>jaxb-impl</artifactId> -->
<!--             <version>2.2.11</version> -->
<!--         </dependency> -->
<!--         <dependency> -->
<!--             <groupId>javax.xml.bind</groupId> -->
<!--             <artifactId>jaxb-api</artifactId> -->
	
<!--         </dependency> -->

        <!-- core support -->
       <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger2.version}</version>
        </dependency>

        <!-- UI support -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger2.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.hateoas</groupId>
            <artifactId>spring-hateoas</artifactId>
        </dependency>

       <!-- ops -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
		<!-- caching -->
        <dependency>
             <groupId>org.ehcache</groupId>
             <artifactId>ehcache</artifactId>
         </dependency>
         <dependency>
             <groupId>org.ehcache</groupId>
             <artifactId>ehcache-transactions</artifactId>
         </dependency>	        

        <dependency>
		    <groupId>com.google.code.gson</groupId>
		    <artifactId>gson</artifactId>
		</dependency>
        <!-- Makes possible to parse Optional values to JSON using RestController -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jdk8</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.mapstruct</groupId>
		    <artifactId>mapstruct-jdk8</artifactId>
		    <version>1.3.0.Beta2</version> 
		</dependency>
        
	</dependencies>
	<build>
	    <pluginManagement>
	        <plugins>
	            <plugin>
	                <groupId>org.sonarsource.scanner.maven</groupId>
	                <artifactId>sonar-maven-plugin</artifactId>
	                <version>3.5.0.1254</version>
	            </plugin>
	            <plugin>
			      <groupId>org.projectlombok</groupId>
			      <artifactId>lombok-maven-plugin</artifactId>
			      <version>1.16.6.1</version>
			      <executions>
			        <execution>
			          <phase>generate-sources</phase>
			          <goals>
			            <goal>delombok</goal>
			          </goals>
			        </execution>
			      </executions>
			    </plugin>
	        </plugins>
	    </pluginManagement>
		<plugins>
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <configuration>
			        <release>${java.version}</release>
			        <verbose>true</verbose>
			        <annotationProcessorPaths>
			            <path>
			                <groupId>org.mapstruct</groupId>
			                <artifactId>mapstruct-processor</artifactId>
			                <version>1.3.0.Beta2</version>
			            </path>
			            <path>
					     <groupId>org.projectlombok</groupId>
					     <artifactId>lombok</artifactId>
					     <version>${lombok.version}</version>
					   </path>
		       		 </annotationProcessorPaths>
			    </configuration>
			    <dependencies>
			        <dependency>
			            <groupId>org.ow2.asm</groupId>
			            <artifactId>asm</artifactId>
			            <version>6.2</version>
			        </dependency>
			    </dependencies>
			</plugin>		
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy Vue.js frontend content</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>src/main/resources/META-INF/resources/</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${project.parent.basedir}/perfectmatch-vue/target/dist</directory>
                                    <includes>
                                        <include>static/</include>
                                        <include>index.html</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/features/*.java</include>
                    </includes>
                    <argLine>-Xmx512m</argLine>
                    <systemPropertyVariables>
                        <webdriver.driver>${webdriver.driver}</webdriver.driver>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${build-plugin.jacoco.version}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo
                    runtime agent which is passed as VM argument when Maven the Surefire plugin
                    is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- Ensures that the code coverage report for
                    unit tests is created after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
            <plugin>
				<groupId>net.serenity-bdd.maven.plugins</groupId>
				<artifactId>serenity-maven-plugin</artifactId>
				<version>${serenity.maven.version}</version>
				<executions>
					<execution>
						<id>serenity-reports</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>aggregate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.10</version>
                <configuration>
                    <repository>${docker.image.repo}/${docker.image.name}</repository>
					<buildArgs>
						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
                </configuration>
            </plugin>	
		</plugins>
	</build>
	
	<profiles>
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<!-- Embedded MongoDB -->
				<dependency>
					<groupId>de.flapdoodle.embed</groupId>
					<artifactId>de.flapdoodle.embed.mongo</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<!-- Disable unit tests -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						 <version>2.21.0</version>
						    <dependencies>
						        <dependency>
						            <groupId>org.ow2.asm</groupId>
						            <artifactId>asm</artifactId>
						            <version>6.2</version>
						        </dependency>
						        <dependency>
						            <groupId>org.junit.platform</groupId>
						            <artifactId>junit-platform-surefire-provider</artifactId>
						            <version>1.0.2</version>
						        </dependency>
						    </dependencies>
					</plugin>
					<!-- Copy the generated fat jar to the docker directory -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>package</phase>
								<configuration>
									<target>
										<copy
											file="${project.build.directory}/${project.build.finalName}.jar"
											tofile="${project.basedir}/docker/${project.artifactId}.jar" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
